#version 450 core
struct Material{
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	float shininess;
};
struct Light {
	vec3 positions;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};


out vec4 FragColor;
in vec3 Normal;
in vec3 FragPos;

uniform Light light;
uniform Material material;
uniform vec3 lightPos;
uniform vec3 objectColor;
uniform vec3 lightColor;
uniform vec3 viewPos;

void main()
{	
	//ambient
	float fragdist = pow(FragPos.x-lightPos.x,2)+pow(FragPos.y-lightPos.y,2)+pow(FragPos.z-lightPos.z,2); // distance to light source
	float ambientStrength =1/fragdist ;
	vec3 ambient = ambientStrength * light.ambient *material.ambient;
	
	//diffuse
	vec3 norm = normalize(Normal);
	vec3 lightDir = normalize(lightPos - FragPos);
	float diff = max(dot(norm, lightDir),0.0);
	vec3 diffuse = diff * light.diffuse *material.diffuse;
	
	//Specular
	float viewdist = pow(FragPos.x-viewPos.x,2)+pow(FragPos.y-viewPos.y,2)+pow(FragPos.z-viewPos.z,2);
	vec3 viewDir = normalize(viewPos - FragPos);
			// The reflect function is defined as: For a given incident vector I and surface normal N, reflect returns the reflection
			// direction calculated as I-2.0 <N,I>*N.  we put -lightDir, since it is pointing away from the fragment position
	vec3 reflectDir = reflect(-lightDir,norm); 
	float spec = pow(max(dot(viewDir,reflectDir),0.0),material.shininess);
	vec3 specular = spec * light.specular *(material.specular);
	
	//resulting 
	vec3 result = (specular+ambient+diffuse);
	FragColor = vec4(result,1.0);
}